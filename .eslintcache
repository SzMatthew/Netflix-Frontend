[{"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\index.js":"1","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\reportWebVitals.js":"2","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\App.js":"3","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Contexts\\search-context.js":"4","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Contexts\\order-by-context.js":"5","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Contexts\\category-context.js":"6","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\Header\\Header.js":"7","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\MovieListContainer\\MovieListContainer.js":"8","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\404Page\\RoutingErrorPage.js":"9","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\Add-EditMovieForm\\AddEditMovieForm.js":"10","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\MovieCard\\MovieCard.js":"11","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\hooks\\useQuery.js":"12","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\Navbar\\Navbar.js":"13","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\MovieDetails\\MovieDetails.js":"14"},{"size":590,"mtime":1612183941845,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1612183941846,"results":"17","hashOfConfig":"16"},{"size":1126,"mtime":1612183941827,"results":"18","hashOfConfig":"16"},{"size":1120,"mtime":1612183941837,"results":"19","hashOfConfig":"16"},{"size":1187,"mtime":1612183941837,"results":"20","hashOfConfig":"16"},{"size":1191,"mtime":1612183941837,"results":"21","hashOfConfig":"16"},{"size":2308,"mtime":1612183941832,"results":"22","hashOfConfig":"16"},{"size":2858,"mtime":1612183941835,"results":"23","hashOfConfig":"16"},{"size":671,"mtime":1612183941829,"results":"24","hashOfConfig":"16"},{"size":7932,"mtime":1612183941830,"results":"25","hashOfConfig":"16"},{"size":2812,"mtime":1612185723443,"results":"26","hashOfConfig":"16"},{"size":215,"mtime":1612183941845,"results":"27","hashOfConfig":"16"},{"size":2127,"mtime":1612263271928,"results":"28","hashOfConfig":"16"},{"size":1857,"mtime":1612183941834,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1q05yl5",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\index.js",[],["62","63"],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\reportWebVitals.js",[],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\App.js",[],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Contexts\\search-context.js",[],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Contexts\\order-by-context.js",[],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Contexts\\category-context.js",[],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\Header\\Header.js",[],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\MovieListContainer\\MovieListContainer.js",["64","65"],"import React, {useState, useEffect} from 'react';\r\nimport {useCategory} from '../../Contexts/category-context';\r\nimport {useOrderBy} from '../../Contexts/order-by-context';\r\nimport {useSearch} from '../../Contexts/search-context';\r\nimport { useQuery } from '../../hooks/useQuery';\r\nimport MovieCard from '../MovieCard/MovieCard';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport MovieDetails from '../MovieDetails/MovieDetails';\r\nimport notFoundSVG from '../../Images/empty.svg';\r\nimport './MovieListContainer.scss';\r\nimport {useRouteMatch, Switch, Route} from 'react-router-dom';\r\n\r\n\r\nconst MovieListContainer = () => {\r\n    const {state: {category}, setCategory}        = useCategory();\r\n    const {state: {orderBy}, setOrderBy}          = useOrderBy();\r\n    const {state: {searchWord}}                   = useSearch();\r\n    const [movies, setMovies]                     = useState([]);\r\n    const [totalMovieAmount, setTotalMovieAmount] = useState(0);\r\n    const categoryQueryParam                      = useQuery().get('category');\r\n    const {path}                                  = useRouteMatch();\r\n    const orderByQueryParam                       = useQuery().get('orderBy');\r\n\r\n    useEffect(() => setCategory(categoryQueryParam), [categoryQueryParam]);\r\n    useEffect(() => setOrderBy(orderByQueryParam), [orderByQueryParam]);\r\n\r\n    // eslint-disable-next-line\r\n    useEffect(() => getMovies(), [category, orderBy, searchWord]);\r\n\r\n    const getMovies = () => { \r\n        fetch('http://localhost:4000/movies?limit=100&filter=' + (category === 'all' ? '' : category) + `&sortBy=${orderBy}&sortOrder=desc&search=${searchWord}&searchBy=title`)\r\n            .then(res => res.json())\r\n            .then(\r\n                ({data}) => {\r\n                    setMovies(data);\r\n                    setTotalMovieAmount(data.length);\r\n                }\r\n            );\r\n    }\r\n\r\n    const NoMovieToList = () => { \r\n        return (\r\n            <div className=\"warning-row\">\r\n                <p>There is no movie to list!</p>\r\n                <img src={notFoundSVG} alt=\"Not Found\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route path={`${path}/:id`}>\r\n                    <MovieDetails/>\r\n                </Route>\r\n            </Switch>\r\n            <main>\r\n                <Navbar/>\r\n                <section className=\"movie-count\"><b>{totalMovieAmount}</b> film listed</section>\r\n                <section className='movie-list-container'>\r\n                    {\r\n                        (movies.length === 0)\r\n                            ? <NoMovieToList />\r\n                            : movies.map(movie => <MovieCard key={movie.id} movie={movie} />)\r\n                    }\r\n                </section>\r\n            </main>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MovieListContainer;","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\404Page\\RoutingErrorPage.js",[],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\Add-EditMovieForm\\AddEditMovieForm.js",["66"],"import React, {useEffect, useState} from 'react';\r\nimport Modal from 'react-modal';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport {Formik, ErrorMessage} from 'formik';\r\nimport {BsX} from 'react-icons/bs';\r\nimport {IconContext} from \"react-icons\";\r\nimport './AddEditMovieForm.scss';\r\n\r\nconst AddEditMovieForm = ({title, movieId, isOpen, openModal}) => {\r\n    const animatedComponents = makeAnimated();\r\n    const options            = [\r\n        {label: 'Action', value: 'Action'},\r\n        {label: 'Advanture', value: 'Advanture'},\r\n        {label: 'Science Fiction', value: 'Science Fiction'},\r\n        {label: 'Fantasy', value: 'Fantasy'},\r\n        {label: 'Documentary', value: 'Documentary'},\r\n        {label: 'Comedy', value: 'Comedy'},\r\n        {label: 'Horror', value: 'Horror'},\r\n        {label: 'Crime', value: 'Crime'},\r\n        {label: 'Thriller', value: 'Thriller'},\r\n        {label: 'Drama', value: 'Drama'},\r\n        {label: 'Mystery', value: 'Mystery'},\r\n        {label: 'History', value: 'History'}\r\n    ];\r\n    const styleColors = {\r\n        red: '#F65261',\r\n        mid_grey: '#424242',\r\n        white: '#FFFFFF',\r\n        light_grey: '#555555'\r\n    };\r\n    const customStyles = {\r\n        control: () => ({\r\n            backgroundColor: styleColors.light_grey,\r\n            color: styleColors.white,\r\n            display: 'flex',\r\n            borderRadius: '5px',\r\n            padding: '5px 0px'\r\n        }),\r\n        multiValue: styles => {\r\n            return {\r\n                ...styles,\r\n                backgroundColor: styleColors.mid_grey,\r\n                borderRadius: '5px'\r\n            };\r\n        },\r\n        multiValueLabel: styles => ({\r\n            ...styles,\r\n            color: styleColors.white,\r\n            fontSize: '15px',\r\n            opacity: '0.8',\r\n            fontWeight: '400'\r\n        }),\r\n        clearIndicator: styles => ({\r\n            ...styles,\r\n            '&:hover': {\r\n                color: styleColors.red\r\n            }\r\n        }),\r\n        dropdownIndicator: styles => ({\r\n            ...styles,\r\n            '&:hover': {\r\n                color: styleColors.red\r\n            }\r\n        }),\r\n        option: provided => ({\r\n            ...provided,\r\n            backgroundColor: styleColors.light_grey,\r\n            color: styleColors.white,\r\n            borderRadius: '5px',\r\n            '&:hover': {\r\n                backgroundColor: styleColors.red\r\n            }\r\n        }),\r\n        menu: provided => ({\r\n            ...provided,\r\n            backgroundColor: styleColors.light_grey\r\n        })\r\n    };\r\n\r\n    const [movieObj, setMovieObj] = useState({title: '', release_date: '', poster_path: '', genres: [], overview: '', runtime: ''});\r\n\r\n    Modal.setAppElement(document.getElementById('root'));\r\n\r\n    useEffect(() => getMovie(), [movieId]);\r\n\r\n    const getMovie = () => {\r\n        if (movieId)\r\n        {\r\n            fetch(\"http://localhost:4000/movies/\" + movieId)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((result) => {\r\n\t\t\t\tsetMovieObj(result);\r\n\t\t\t});\r\n        }\r\n    }\r\n\r\n    const MovieIdFormGroup = () => {\r\n        if (movieId){\r\n            return (\r\n                <>\r\n                    <label htmlFor=\"title\">MOVIE ID</label>\r\n                    <span className=\"movieId\">{movieId}</span>\r\n                </>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} className='modal' overlayClassName=\"modal-overlay\" closeTimeoutMS={350}>\r\n            <header>\r\n                <h2>{title}</h2>\r\n                <IconContext.Provider value={{className: \"close-icon\"}}>\r\n                    <BsX onClick={() => openModal(false)}/>\r\n                </IconContext.Provider>\r\n            </header>\r\n            \r\n            <Formik\r\n                initialValues={movieObj}\r\n                validate={values => {\r\n                    const errors = {};\r\n                    if (!values.title){\r\n                        errors.title = 'Required';\r\n                    }\r\n                    if (!values.release_date){\r\n                        errors.release_date = 'Required';\r\n                    }\r\n                    if (!values.poster_path){\r\n                        errors.poster_path = 'Required';\r\n                    }\r\n                    if (!values.genre){\r\n                        errors.genre = 'Select at least one genre to proceed'\r\n                    }\r\n                    if (!values.overview){\r\n                        errors.overview = 'Required';\r\n                    }\r\n                    if (!values.runtime){\r\n                        errors.runtime = 'Required';\r\n                    } else if (!/^[0-9]+$/i.test(values.runtime)){\r\n                        errors.runtime = 'Runtime only takes numbers!';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    setTimeout(() => {\r\n                        alert(JSON.stringify(values, null, 2));\r\n                        setSubmitting(false);\r\n                    }, 400);\r\n                    }}\r\n            >\r\n                {({values, handleChange, handleBlur, handleReset, handleSubmit, isSubmitting,}) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <MovieIdFormGroup />\r\n                        \r\n                        <label htmlFor=\"title\">TITLE</label>\r\n                        <input type='text' name='title' value={values.title} onChange={handleChange} onBlur={handleBlur} placeholder=\"Title here\"></input>\r\n                        <ErrorMessage name=\"title\" component=\"div\" className='error-message'/>\r\n\r\n                        <label htmlFor=\"release_date\">RELEASE DATE</label>\r\n                        <input type='date' name='release_date' value={values.release_date} onChange={handleChange} onBlur={handleBlur} placeholder=\"Select Date\"></input>\r\n                        <ErrorMessage name=\"release_date\" component=\"div\" className='error-message'/>\r\n\r\n                        <label htmlFor=\"poster_path\">POSTER URL</label>\r\n                        <input type='text' name='poster_path' value={values.poster_path} onChange={handleChange} onBlur={handleBlur} placeholder=\"Poster URL Here\"></input>\r\n                        <ErrorMessage name=\"poster_path\" component=\"div\" className='error-message'/>\r\n\r\n                        <label htmlFor=\"genres\">GENRES</label>\r\n                        <Select isMulti closeMenuOnSelect={false} components={animatedComponents} styles={customStyles} name='genres' options={options}></Select>\r\n                        <ErrorMessage name=\"genres\" component=\"div\" className='error-message'/>\r\n\r\n                        <label htmlFor=\"overview\">OVERVIEW</label>\r\n                        <input type='text' name='overview' value={values.overview} onChange={handleChange} onBlur={handleBlur} placeholder=\"Overview Text Goes Here\"></input>\r\n                        <ErrorMessage name=\"overview\" component=\"div\" className='error-message'/>\r\n\r\n                        <label htmlFor=\"runtime\">RUNTIME</label>\r\n                        <input type='text' name='runtime' value={values.runtime} onChange={handleChange} onBlur={handleBlur} placeholder=\"Runtime Text Goes Here\"></input>\r\n                        <ErrorMessage name=\"runtime\" component=\"div\" className='error-message'/>\r\n\r\n                        <footer>\r\n                            <button className=\"red-border\" disabled={isSubmitting} onClick={handleReset}>RESET</button>\r\n                            <button type='button' className=\"red\" disabled={isSubmitting} onClick={handleSubmit}>{movieId ? 'SAVE' : 'SUBMIT'}</button>\r\n                        </footer>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Modal>\r\n    );\r\n    \r\n}\r\n\r\nexport default AddEditMovieForm;","D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\MovieCard\\MovieCard.js",[],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\hooks\\useQuery.js",[],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\Navbar\\Navbar.js",["67"],"D:\\Projects\\Netflix Frontend\\Netflix-Frontend\\src\\Components\\MovieDetails\\MovieDetails.js",["68"],"import React, {useEffect, useState} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport './MovieDetails.scss';\r\n\r\nconst MovieDetails = () => {\r\n    const {id} = useParams();\r\n    const [movie, setMovie] = useState(null);\r\n\r\n    useEffect(() => getMovie(), [id]);\r\n\r\n    const getMovie = () => { \r\n        fetch(\"http://localhost:4000/movies/\" + id)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((result) => {\r\n\t\t\t\tsetMovie(result);\r\n\t\t\t});\r\n    }\r\n\r\n    if (movie !== null)\r\n    {\r\n        return (\r\n            <header className=\"movie-header\">\r\n                <div className=\"movie-container\">\r\n                    <img src={movie.poster_path} alt={movie.title}></img>\r\n                    <div className=\"details\">\r\n                        <div className=\"title-score-container\">\r\n                            <h2>{movie.title}</h2>\r\n                            <div className=\"score\">\r\n                                <span>{movie.vote_average}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"tagline\">\r\n                            <span>{movie.tagline}</span>\r\n                        </div>\r\n                        <div className=\"date-minutes-container\">\r\n                            <span>{movie.release_date.split('-')[0]}</span>\r\n                            <span className=\"runtime\">\r\n                                {movie.runtime ? movie.runtime + 'min' : ''}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"overview\">\r\n                            <p>{movie.overview}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n    else\r\n    {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieDetails;",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":24,"column":54,"nodeType":"75","endLine":24,"endColumn":74,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":25,"column":52,"nodeType":"75","endLine":25,"endColumn":71,"suggestions":"78"},{"ruleId":"73","severity":1,"message":"79","line":85,"column":33,"nodeType":"75","endLine":85,"endColumn":42,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":10,"column":12,"nodeType":"83","messageId":"84","endLine":10,"endColumn":16},{"ruleId":"73","severity":1,"message":"79","line":9,"column":33,"nodeType":"75","endLine":9,"endColumn":37,"suggestions":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCategory'. Either include it or remove the dependency array.","ArrayExpression",["88"],"React Hook useEffect has a missing dependency: 'setOrderBy'. Either include it or remove the dependency array.",["89"],"React Hook useEffect has a missing dependency: 'getMovie'. Either include it or remove the dependency array.",["90"],"no-unused-vars","'path' is assigned a value but never used.","Identifier","unusedVar",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [categoryQueryParam, setCategory]",{"range":"100","text":"101"},"Update the dependencies array to be: [orderByQueryParam, setOrderBy]",{"range":"102","text":"103"},"Update the dependencies array to be: [getMovie, movieId]",{"range":"104","text":"105"},"Update the dependencies array to be: [getMovie, id]",{"range":"106","text":"107"},[1241,1261],"[categoryQueryParam, setCategory]",[1316,1335],"[orderByQueryParam, setOrderBy]",[2851,2860],"[getMovie, movieId]",[271,275],"[getMovie, id]"]